//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 1 colors.
  struct color {
    /// Color `orange`.
    static let orange = Rswift.ColorResource(bundle: R.hostingBundle, name: "orange")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "orange", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func orange(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.orange, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.entitlements` struct is generated, and contains static references to 4 properties.
  struct entitlements {
    static let apsEnvironment = infoPlistString(path: [], key: "aps-environment") ?? "development"

    struct comAppleDeveloperIcloudContainerIdentifiers {
      static let iCloudComAppsplussoftwareWaspCheck = infoPlistString(path: ["com.apple.developer.icloud-container-identifiers"], key: "iCloud.com.appsplussoftware.WaspCheck") ?? "iCloud.com.appsplussoftware.WaspCheck"

      fileprivate init() {}
    }

    struct comAppleDeveloperIcloudServices {
      static let cloudDocuments = infoPlistString(path: ["com.apple.developer.icloud-services"], key: "CloudDocuments") ?? "CloudDocuments"
      static let cloudKit = infoPlistString(path: ["com.apple.developer.icloud-services"], key: "CloudKit") ?? "CloudKit"

      fileprivate init() {}
    }

    struct comAppleDeveloperUbiquityContainerIdentifiers {
      static let iCloudComAppsplussoftwareWaspCheck = infoPlistString(path: ["com.apple.developer.ubiquity-container-identifiers"], key: "iCloud.com.appsplussoftware.WaspCheck") ?? "iCloud.com.appsplussoftware.WaspCheck"

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 1 images.
  struct image {
    /// Image `turtlerock`.
    static let turtlerock = Rswift.ImageResource(bundle: R.hostingBundle, name: "turtlerock")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "turtlerock", bundle: ..., traitCollection: ...)`
    static func turtlerock(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.turtlerock, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.info` struct is generated, and contains static references to 1 properties.
  struct info {
    struct uiApplicationSceneManifest {
      static let _key = "UIApplicationSceneManifest"
      static let uiApplicationSupportsMultipleScenes = false

      struct uiSceneConfigurations {
        static let _key = "UISceneConfigurations"

        struct uiWindowSceneSessionRoleApplication {
          struct defaultConfiguration {
            static let _key = "Default Configuration"
            static let uiSceneConfigurationName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneConfigurationName") ?? "Default Configuration"
            static let uiSceneDelegateClassName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneDelegateClassName") ?? "$(PRODUCT_MODULE_NAME).SceneDelegate"
            static let uiSceneStoryboardFile = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneStoryboardFile") ?? "Main"

            fileprivate init() {}
          }

          fileprivate init() {}
        }

        fileprivate init() {}
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 1 nibs.
  struct nib {
    /// Nib `PlaceListTVCell`.
    static let placeListTVCell = _R.nib._PlaceListTVCell()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PlaceListTVCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.placeListTVCell) instead")
    static func placeListTVCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.placeListTVCell)
    }
    #endif

    static func placeListTVCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PlaceListTVCell? {
      return R.nib.placeListTVCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PlaceListTVCell
    }

    fileprivate init() {}
  }

  /// This `R.reuseIdentifier` struct is generated, and contains static references to 1 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `PlaceListTVCell`.
    static let placeListTVCell: Rswift.ReuseIdentifier<PlaceListTVCell> = Rswift.ReuseIdentifier(identifier: "PlaceListTVCell")

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 13 localization keys.
    struct localizable {
      /// Value: Camera
      static let camera = Rswift.StringResource(key: "camera", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Cancel
      static let cancel = Rswift.StringResource(key: "cancel", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Choose Image
      static let chooseImage = Rswift.StringResource(key: "chooseImage", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: OK
      static let ok = Rswift.StringResource(key: "ok", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Photos
      static let photos = Rswift.StringResource(key: "photos", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Remove photo
      static let removePhoto = Rswift.StringResource(key: "removePhoto", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Settings
      static let settings = Rswift.StringResource(key: "settings", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: To enable access, go to Settings > Privacy > Camera and turn on Camera access for this app.
      static let toEnableAccessTheCamera = Rswift.StringResource(key: "toEnableAccessTheCamera", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: To enable access, go to Settings > Privacy > Photos and turn on Photos access for this app.
      static let toEnableAccessThePhotos = Rswift.StringResource(key: "toEnableAccessThePhotos", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Unable to access the 
      static let unableToAccessThe = Rswift.StringResource(key: "unableToAccessThe", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: View photo
      static let showPhoto = Rswift.StringResource(key: "showPhoto", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Warning
      static let warning = Rswift.StringResource(key: "warning", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: You don't have camera
      static let youDoNotHaveCamera = Rswift.StringResource(key: "youDoNotHaveCamera", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)

      /// Value: Camera
      static func camera(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("camera", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "camera"
        }

        return NSLocalizedString("camera", bundle: bundle, comment: "")
      }

      /// Value: Cancel
      static func cancel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("cancel", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "cancel"
        }

        return NSLocalizedString("cancel", bundle: bundle, comment: "")
      }

      /// Value: Choose Image
      static func chooseImage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("chooseImage", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "chooseImage"
        }

        return NSLocalizedString("chooseImage", bundle: bundle, comment: "")
      }

      /// Value: OK
      static func ok(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ok", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ok"
        }

        return NSLocalizedString("ok", bundle: bundle, comment: "")
      }

      /// Value: Photos
      static func photos(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("photos", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "photos"
        }

        return NSLocalizedString("photos", bundle: bundle, comment: "")
      }

      /// Value: Remove photo
      static func removePhoto(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("removePhoto", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "removePhoto"
        }

        return NSLocalizedString("removePhoto", bundle: bundle, comment: "")
      }

      /// Value: Settings
      static func settings(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "settings"
        }

        return NSLocalizedString("settings", bundle: bundle, comment: "")
      }

      /// Value: To enable access, go to Settings > Privacy > Camera and turn on Camera access for this app.
      static func toEnableAccessTheCamera(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("toEnableAccessTheCamera", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "toEnableAccessTheCamera"
        }

        return NSLocalizedString("toEnableAccessTheCamera", bundle: bundle, comment: "")
      }

      /// Value: To enable access, go to Settings > Privacy > Photos and turn on Photos access for this app.
      static func toEnableAccessThePhotos(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("toEnableAccessThePhotos", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "toEnableAccessThePhotos"
        }

        return NSLocalizedString("toEnableAccessThePhotos", bundle: bundle, comment: "")
      }

      /// Value: Unable to access the 
      static func unableToAccessThe(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("unableToAccessThe", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "unableToAccessThe"
        }

        return NSLocalizedString("unableToAccessThe", bundle: bundle, comment: "")
      }

      /// Value: View photo
      static func showPhoto(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("showPhoto", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "showPhoto"
        }

        return NSLocalizedString("showPhoto", bundle: bundle, comment: "")
      }

      /// Value: Warning
      static func warning(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("warning", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "warning"
        }

        return NSLocalizedString("warning", bundle: bundle, comment: "")
      }

      /// Value: You don't have camera
      static func youDoNotHaveCamera(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("youDoNotHaveCamera", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "youDoNotHaveCamera"
        }

        return NSLocalizedString("youDoNotHaveCamera", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try nib.validate()
    #endif
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _PlaceListTVCell.validate()
    }

    struct _PlaceListTVCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = PlaceListTVCell

      let bundle = R.hostingBundle
      let identifier = "PlaceListTVCell"
      let name = "PlaceListTVCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PlaceListTVCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PlaceListTVCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "turtlerock", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'turtlerock' is used in nib 'PlaceListTVCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "orange", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'orange' is used in storyboard 'PlaceListTVCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try main.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct main: Rswift.StoryboardResourceType, Rswift.Validatable {
      let addDetailVC = StoryboardViewControllerResource<AddDetailVC>(identifier: "AddDetailVC")
      let bundle = R.hostingBundle
      let dashBoardListVC = StoryboardViewControllerResource<DashBoardListVC>(identifier: "DashBoardListVC")
      let name = "Main"
      let placeDetailVC = StoryboardViewControllerResource<PlaceDetailVC>(identifier: "PlaceDetailVC")

      func addDetailVC(_: Void = ()) -> AddDetailVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: addDetailVC)
      }

      func dashBoardListVC(_: Void = ()) -> DashBoardListVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: dashBoardListVC)
      }

      func placeDetailVC(_: Void = ()) -> PlaceDetailVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: placeDetailVC)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "turtlerock", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'turtlerock' is used in storyboard 'Main', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "orange", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'orange' is used in storyboard 'Main', but couldn't be loaded.") }
        }
        if _R.storyboard.main().addDetailVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'addDetailVC' could not be loaded from storyboard 'Main' as 'AddDetailVC'.") }
        if _R.storyboard.main().dashBoardListVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'dashBoardListVC' could not be loaded from storyboard 'Main' as 'DashBoardListVC'.") }
        if _R.storyboard.main().placeDetailVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'placeDetailVC' could not be loaded from storyboard 'Main' as 'PlaceDetailVC'.") }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
